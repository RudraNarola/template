{
    "Advance template": {
        "prefix": "qwe",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "#define int long long",
            "const int mod = 1e9+7;",
			"",
            "void solve()",
            "{",
            "    $1",
            "}",
            "",
            "signed main()",
            "{",
            "#ifndef ONLINE_JUDGE",
            "    freopen(\"d.txt\", \"w\", stderr);",
            "#endif",
            "    ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL);",
            "    int t = 1;",
            "    cin >> t;",
            "    while(t--) solve();",
            "    return 0;",
            "}"
        ],
        "description": "Log output to console"
    },
    "sqrt prime test": {
        "prefix": "primeTest",
        "body": [
            "bool isPrime(int num)",
            "{",
            "    if (num <= 1)",
            "        return false;",
            "    if (num == 2)",
            "        return true;",
            "    if (num % 2 == 0)",
            "        return false;",
            "    for (int i = 3; i * i <= num; i += 2)",
            "        if (num % i == 0)",
            "            return false;",
            "    return true;",
            "}"
        ],
        "description": "Log output to console"
    },
    "seive prime test": {
        "prefix": "seivePrimeTest",
        "body": [
            "const int N = 1179859;",
            "int is_Prime[N];",
            "void Seive()",
            "{",
            "    for (int i = 1; i <= N; i++)",
            "        is_Prime[i] = 1;",
            "    is_Prime[0] = is_Prime[1] = 0;",
            "    for (int i = 2; i * i <= N; i++)",
            "    {",
            "        if (is_Prime[i])",
            "        {",
            "            for (int j = i * i; j <= N; j += i)",
            "                is_Prime[j] = 0;",
            "        }",
            "    }",
            "}"
        ],
        "description": "Log output to console"
    },
    "binary exponential": {
        "prefix": "binoexpo",
        "body": [
            "const long long M = 1e18 + 7;",
            "int power(int a, int b, long long m = M)",
            "{",
            "    int ans = 1;",
            "    while (b != 0)",
            "    {",
            "        if (b & 1)",
            "        {",
            "            ans = (ans * a) % m;",
            "        }",
            "        a = (a * a) % m;",
            "        b = b >> 1;",
            "    }",
            "    return ans;",
            "}"
        ],
        "description": "Log output to console"
    },
    "gcd and lcm": {
        "prefix": "gcd",
        "body": [
            "int gcd(int a, int b)",
            "{",
            "    if (b == 0)",
            "        return a;",
            "    return gcd(b, a % b);",
            "}",
            "int lcm(int a, int b) { return ((a * b) / gcd(a, b));}"
        ],
        "description": "Log output to console"
    },
    "for thy loop": {
        "prefix": "ff",
        "body": [
            "for(int i=0; i<n; i++)",
		],
        "description": "Log output to console"
    },
    "say Yess!!": {
        "prefix": "cy",
        "body": [
            "cout << \"YES\\n\";"
        ],
        "description": "Log output to console"
    },
    "say Nooo!!": {
        "prefix": "cn",
        "body": [
            "cout << \"NO\\n\";"
        ],
        "description": "Log output to console"
    },
    "make thy vector": {
        "prefix": "vec",
        "body": [
            "vector<int> v(n);"
        ],
        "description": "Log output to console"
    },
    "cin thy vector": {
        "prefix": "cv",
        "body": [
            "cin >> v[i];"
        ],
        "description": "Log output to console"
    },
    "cout thy vector": {
        "prefix": "co",
        "body": [
            "cout << v[i] << \" \";"
        ],
        "description": "Log output to console"
    },
    "sort thy vector": {
        "prefix": "sov",
        "body": [
            "sort(v.begin(),v.end());"
        ],
        "description": "Log output to console"
    },
    "test it ": {
        "prefix": "test",
        "body": [
            "int t;",
            "cin >> t;",
            "while (t--)",
            "{",
            "    $1",
            "}"
        ],
        "description": "Log output to console"
    },
    "Debugggur": {
        "prefix": "dede",
        "body": [
            "void __print(int x) { cerr << x; }",
            "void __print(double x) { cerr << x; }",
            "void __print(long double x) { cerr << x; }",
            "void __print(char x) { cerr << '\\'' << x << '\\''; }",
            "void __print(const char *x) { cerr << '\\\"' << x << '\\\"'; }",
            "void __print(const string &x) { cerr << '\\\"' << x << '\\\"'; }",
            "void __print(bool x) { cerr << (x ? \"true\" : \"false\"); }",
            "",
            "template ",
            "void __print(const pair &x)",
            "{",
            "    cerr << '{';",
            "    __print(x.first);",
            "    cerr << ',';",
            "    __print(x.second);",
            "    cerr << '}';",
            "}",
            "template ",
            "void __print(const T &x)",
            "{",
            "    int f = 0;",
            "    cerr << '{';",
            "    for (auto &i : x)",
            "        cerr << (f++ ? \",\" : \"\"), __print(i);",
            "    cerr << \"}\";",
            "}",
            "void _print() { cerr << \"]\\n\"; }",
            "template ",
            "void _print(T t, V... v)",
            "{",
            "    __print(t);",
            "    if (sizeof...(v))",
            "        cerr << \", \";",
            "    _print(v...);",
            "}",
            "#ifndef ONLINE_JUDGE",
            "#define debug(x...)               \\",
		  "cerr<<\"[
                \"<<#x<<\"
            ]=[
                \";\\",
                "    _print(x)",
                "#else",
                "#define debug(x...)",
                "#endif"
            ],
            "description": ""
        },
        "Simpler template": {
            "prefix": "zxc",
            "body": [
                "#include ",
                "using namespace std;",
                "",
                "int main()",
                "{",
                "    $1",
                "    return 0;",
                "}"
            ],
            "description": ""
        },
        "Trie Data Structure": {
            "prefix": "triee",
            "body": [
                "// structure of a node in trie",
                "struct Node",
                "{",
                "	Node *links[2];",
                "",
                "	bool containsKey(int ind)",
                "	{",
                "		return (links[ind] != NULL);",
                "	}",
                "	Node *get(int ind)",
                "	{",
                "		return links[ind];",
                "	}",
                "	void put(int ind, Node *node)",
                "	{",
                "		links[ind] = node;",
                "	}",
                "};",
                "",
                "// trie data structure",
                "class Trie",
                "{",
                "private:",
                "	Node *root;",
                "",
                "public:",
                "	// constructor",
                "	Trie()",
                "	{",
                "		root = new Node();",
                "	}",
                "",
                "public:",
                "	// insert a number in trie",
                "	void insert(int num)",
                "	{",
                "		Node *node = root;",
                "		for (int i = 31; i >= 0; i--)",
                "		{",
                "			int bit = (num >> i) & 1;",
                "			if (!node->containsKey(bit))",
                "			{",
                "				node->put(bit, new Node());",
                "			}",
                "			node = node->get(bit);",
                "		}",
                "	}",
                "",
                "public:",
                "	// find the maximum xor of num with any number in trie",
                "	int findMax(int num)",
                "	{",
                "		Node *node = root;",
                "		int maxNum = 0;",
                "		for (int i = 31; i >= 0; i--)",
                "		{",
                "			int bit = (num >> i) & 1;",
                "			if (node->containsKey(!bit))",
                "			{",
                "				maxNum = maxNum | (1 << i);",
                "				node = node->get(!bit);",
                "			}",
                "			else",
                "			{",
                "				node = node->get(bit);",
                "			}",
                "		}",
                "		return maxNum;",
                "	}",
                "};"
            ],
            "description": ""
        }
